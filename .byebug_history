exit
 Order.where(mechanic:Mechanic.where("unique_id like '%2%' ")).where(province_cd:o.id).where(created_at: (@start_date)..(@end_date+1.day)).count
@data
n
@end_date+1.day
@end_date
@start_date
exit
finish 150
finish 42
finish 100
finish 55
n
next
@end_date
exit
Date.civil(params[:start_date][:year].to_i, params[:start_date][:month].to_i, params[:start_date][:day].to_i)
DateTime.parse(@end_date)
@end_date
DateTime.parse(@end_date)
@end_date.to_s
@end_date
finish
finish 3
fnish 3
ifnish 3
finish 55
finish
finish 55
finish
next
params
template
order.contact_mobile
exit
finish
step
finish
next
@order.confirming?
@order.working?
@order.paid?
next
exit
Order.where(user_id: current_store)
current_store
exit
@order
next
exit
next
exit
finish
next
n
next
@order
exit
finish 13
finish 55
finish 
next
finish 65
finish 66
next
exit
next
exit
finish
finish 20
finish 55
next
finish 6
finish 55
finish
next
procedure_price
next
procedure_price
next
pre_remark
next
remark
next
exit
@work
n
next
exit
@work
next
exit
@work.nil?
@work.nil
@work
next
@work = Work.where("mechanic_id = ? AND skill_id = ?", temp_mechanic.mechanic_id, _skill_id).last
 _skill_id
 temp_mechanic.mechanic_id
exit
temp_mechanic
next
_skill_id
exit
finish
_skill_id
key
finish
step
exit
n
finish 15
finish 55
_skill_id
finish
f
n
temp_mechanic
exit
finish 55
n
@mechanic.mechanic.works
@mechanic_params.works
n
mechanic_params
@mechanic_params[:works]
@mechanic_params.works
@mechanic_params
n
exit
@mechanic.mechanic.works
n
@mechanic.mechanic.works
n
works
exit
finish 22
finish 16
finish 55
finish 50
finish
@mechanic.mechanic.works
n
@mechanic.mechanic.works
n
@mechanic.mechanic.works
n
works
mechanic_params[:mechanic_attributes][:skills]
@mechanic_params[:mechanic_attributes][:skill]
@mechanic_params[:mechanic_attributes]
@mechanic_params[:mechanic_attributes][:works]
works
finish
finish 54
finish 20000
finish
f
n
@mechanic.mechanic.works.push(works)
works
pp
exit
p.object
p
exit
@mechanic.mechanic.skills
@mechanic.mechanic.works
@mechanic.mechanic.works= works
works
exit
@skillall
exit
next
exit
next
net
next
n
@mechanic.mechanic.get_work_by_skill_id(1)
@mechanic.mechanic.git_work_by_skill_id(1)
skill
continue
step
s
@skillall
n
continue
finish
s
exit
@mechanic.mechanic.works.push(works)
n
works
exit
finish
f
n
step
work[:is_checked]
n
exit
mechanic_params[:mechanic_attributes][:skills]
mechanic_params[:mechanic_attributes]
work[:is_checked]
n
work[:is_checked]
exit
finish
 @mechanic_params[:mechanic_attributes].delete :skills
@mechanic_params
 @mechanic_params[:mechanic_attributes].delete :skills
@mechanic_params=mechanic_params
@test
@test.delete :skills
@test["skills"]
@test
@test=mechanic_params[:mechanic_attributes]
mechanic_params[:mechanic_attributes][:skills]
mechanic_params[:mechanic_attributes][:skills]=[]
mechanic_params[:mechanic_attributes][:skills]
mechanic_params[:mechanic_attributes][:skills]={}
mechanic_params[:mechanic_attributes][:skills]
mechanic_params[:mechanic_attributes][skills]
mechanic_params[:mechanic_attributes].delete :skills
mechanic_params[:mechanic_attributes].delete skills
mechanic_params[:mechanic_attributes]
mechanic_params[:mechanic_attributes].skills
mechanic_params[:mechanic_attributes].delete :skills
n
exit
mechanic_params[:mechanic_attributes][:skills][1]
mechanic_params[:mechanic_attributes][:skills]
n
mechanic_params1
mechanic_params1 
mechanic_params1[0]
n
mechanic_params1.each
mechanic_params1
q
step 10
finish
f
finish
f
finish
n
finish
n
exit
finish
mechanic_params[:mechanic_attributes][:skills]
mechanic_params[:mechanic_attributes].skills
mechanic_params[:mechanic_attributes]
mechanic_params.mechanic
